@function strip-units($number) {
	@return $number / ($number * 0 + 1);
}

@mixin clearfix {
	&::after {
		content: "";
		display: block;
		clear: both;
	}
}

//*
// Create an evenly spaced grid of hexagons
//
// @param number $columns The number of columns in "long" rows
// @param number $gutter [default: 0] The gutter between columns
// @param string $weight [default: odd] Which row should recieve the visual weight
//  Visual weight is defined by the "long" rows, the row with more elements, or
//  for the single column gird, the visual weight is placed on the elements aligned left.
//
@mixin hex-grid($columns, $gutter: 0, $weight: odd) {
	float: left;

	// Multicolumn layout
	@if $columns > 1 {
		// The gutter count is one less than number of columns
		$gutter-count: $columns - 1;

		// The width of each hexagon is:
		//   100 (The total width of the container)
		// - The gutter width * $gutter-count
		// รท The number of columns
		// รท 100 (for percentage)
		$width: percentage((100 - (strip-units($gutter) * $gutter-count)) / $columns / 100);
		width: $width;

		// The gutter
		margin-right: $gutter;

		// When constructing the grid, the last column in even rows (n) is significant
		// That column defines the point at which the grid pattern repeats
		$n: ($columns * 2) - 1;

		// There are short rows and there are long rows
		// The first and last column is short rows must be pushed away from the edges
		$push: ($width + $gutter)/2;

		// First column in short rows
		$first-short: 1;
		@if $weight == odd {
			$first-short: $columns + 1;
		}

		&:nth-child(#{$n}n + #{$first-short}) {
			margin-left: $push;
		}

		// Last column in short rows
		$last-short: $columns - 1;
		@if $weight == odd {
			$last-short: $n;
		}
		&:nth-child(#{$n}n + #{$last-short}) {
			margin-right: $push;
		}

		// The last column in long rows needs no gutter
		$last-long: $n;
		@if $weight == odd {
			$last-long: $columns;
		}
		&:nth-child(#{$n}n + #{$last-long}) {
			margin-right: 0;
		}

		// To remove excess space between rows, the rows must be "pulled" together
		// This should only occur on even rows, as the first row should define the
		// initial placement of the grid
		// sqrt(3)/6 == 0.288675135
		$pull: ($width * -0.288675135) + $gutter;

		// Every element in even rows
		$first-even: $columns;
		@if $weight == odd {
			$first-even: $columns + 1;
		}
		$all-even: join((), (), comma);
		@for $i from $first-even through $n {
			$all-even: append($all-even, unquote("&:nth-child(#{$n}n+#{$i})"));
		}
		#{$all-even} {
			margin-top: $pull;
			margin-bottom: $pull;
		}
	}
	// Single column layout
	@else if $columns == 1 {
		// Given the nature of hexagons, 2/3 is the default width
		$width: percentage(2/3) - ($gutter/2);
		width: $width;

		// Each column must be pushed into place
		// The visual weight is placed on the left column
		$even-push: right;
		$odd-push: left;
		@if $weight == odd {
			$even-push: left;
			$odd-push: right;
		}
		$push: 100% - $width;

		// To remove excess space between rows, the rows must be "pulled" together
		// This should only occur on even rows, as the first row should define the
		// initial placement of the grid
		// sqrt(3)/6 == 0.288675135
		$pull: ($width * -0.288675135) + $gutter;
		&:nth-child(even) {
			margin-#{$even-push}: $push;

			margin-top: $pull;
			margin-bottom: $pull;
		}

		&:nth-child(odd) {
			margin-#{$odd-push}: $push;
		}
	}

	// Ensure the last row maintains it position
	&:last-child {
		margin-bottom: 0;
	}
}

.hex {

	visibility: hidden;
	overflow: hidden;
	pointer-events: auto;
	//background: $color-violet-light;
	background: $color-violet-darker;
	transform: scale(1) rotate(120deg);
	transition: all 0.3s $ease-out-quart;
	transition-delay: 0.15s;

	&:hover {
		transform: scale(1.12) rotate(120deg);
		transition-delay: 0s;
	}

	&:after {
		content: "";
		display: block;
		padding-top: 115.4734411%;
	}

	& > * {
		position: absolute;
		top: 0;
		left: 0;
	}

	.hook {
		overflow: hidden;
		width: 100%;
		height: 100%;
		background: inherit;
		transform: rotate(-60deg);
	}

	& > .hook > .hook {
		visibility: visible;
		display: flex;
		align-items: center;
		justify-content: center;
	}

	.hex-image-background {
		position: absolute;
		height: 110%;
		max-width: none;
		max-height: none;
		
	}

	// GRID

	@media (max-width: 499px) {
		@include hex-grid(1, 3.6%);
	}

	@media (min-width: 500px) and (max-width: 719px) {
		@include hex-grid(2, 3.6%, even);
	}

	@media (min-width: 720px) and (max-width: 879px) {
		@include hex-grid(3, 3.6%, even);
	}

	@media (min-width: 880px) and (max-width: 1099px) {
		@include hex-grid(4, 2.4%, even);
	}

	@media (min-width: 1100px) {
		@include hex-grid(5, 2.4%, even);
	}

	.caption {
		/*
		text-align: center;
		position: absolute;
		top: 50%;
		left: 0;
		right: 0;
		transform: translateY(-50%);
		
		*/
		z-index: 10;
		
		width: 100%;
		margin-top: 45%;

		color: $color-text-lightest;
		font-size: $font-size-standard;
		font-family: $font-family-special;
		line-height: calc(2* #{$font-size-big});
		text-transform: uppercase;
		text-align: center;

		&.nemesis-anti {
			background-color: $color-red;
		}

		&.nemesis-pro {
			background-color: scale-color(rgba($color-blue-light, 1), $lightness: -20%, $saturation: 10%, $hue: -2%);
		}
	}
}

.hex-container {
	max-width: 1920px;
	margin: 0 auto;
	padding: 48px;

	//background-image: url("/img/background-hexagons-empty.jpg");

	pointer-events: none;
	transition: all 0.75s $ease-out-quart;
	overflow: hidden;
	transition-delay: 0.35s;

	text-transform: uppercase;

	// &:hover {
	// 	background: #fff;
	// 	//background: linear-gradient(to bottom, rgba($color-blue-darkest, 1) 0%, rgba($color-red-grad-inter, 1) 25%, rgba(#832A3B, 1) 100%);
	// 	transition: all 0.75s $ease-out-quart;
	// 	transition-delay: 0s;
	// }

	@include clearfix;
}

.input-hex-container {
	display: flex;
	flex-wrap: wrap;
	justify-content: center;
	
	font-family: $font-family-special;
	font-size: $font-size-standard;
	line-height: calc(1.75 * #{$font-size-standard});
	text-transform: uppercase;
	color: $color-text-lightest;

	header {
		margin: 0 12px;
		padding: 0 12px;
	}

	input[type="checkbox"]:checked,
	input[type="checkbox"]:not(:checked) {
		display: none;

		+ label {
			position: relative;

			margin: 0 12px;
			padding: 0 12px;

			cursor: pointer;
			-webkit-transition: all 0.2s ease;
			transition: all 0.2s ease;

			&:before {
				content: "";
				position: absolute;
				left: 0;
				top: 0;
				width: 100%;
				height: 30px;
				border-radius: 3px;
				background-color: transparent;
				-webkit-transition: all 0.2s ease;
				transition: all 0.2s ease;
			}

			&:after {
				content: "";
				position: absolute;
				bottom: 0;
				left: 12px;

				border-radius: 2px;
				height: 3px;

				-webkit-transition: all 0.2s ease;
				transition: all 0.2s ease;
			}
		}

		&:hover {
			+ label {
				&:before,
				&:after {
					opacity: 0.7;
				}
			}
		}
	}

	input[type="checkbox"]:checked {
		+ label {
			&:after {
				opacity: 1;
				width: calc(100% - 24px);
			}
		}
	}

	input[type="checkbox"]:not(:checked) {
		+ label {
			&:after {
				opacity: 0;
				width: 0;
			}
		}
	}

	.checkbox:checked,
	.checkbox-all:not(:checked) {
		&.all {
			+ label:after {
				background-color: $color-text-lightest;
			}
		}
		// CHARACTERS COLOURS

		&.nemesis-pro {
			+ label:after {
				background-color: $color-blue-lighter;
			}
		}

		&.nemesis-anti {
			+ label:after {
				background-color: $color-red-light;
			}
		}

		// PROPAGANDA COLOURS

		&.threed-art {
			+ label:after {
				background-color: $color-blue-lighter;
			}
		}

		&.character-design {
			+ label:after {
				background-color: $color-red-light;
			}
		}

		&.illustration {
			+ label:after {
				background-color: $color-gold-light;
			}
		}
	}
}

.hide-hex {
	//transform: scale(0)rotate(120deg);
	opacity: 0.1;
	transition: all 0.5s cubic-bezier(0.165,0.84,0.44,1);
    transition-delay: .15s;
}
